; ModuleID = '/home/scoobydoo/Desktop/CTF/tamuctf_2020/rev/just_bc/just-bc.bin'
source_filename = "just_bc.6bksiek5-cgu.0"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"std::io::error::Error" = type { [0 x i64], %"std::io::error::Repr", [0 x i64] }
%"std::io::error::Repr" = type { [0 x i8], i8, [15 x i8] }
%"core::fmt::Formatter" = type { [0 x i64], { i64, i64 }, [0 x i64], { i64, i64 }, [0 x i64], { {}*, [3 x i64]* }, [0 x i64], { i64*, i64* }, [0 x i64], { [0 x { i8*, i8* }]*, i64 }, [0 x i32], i32, [0 x i32], i32, [0 x i8], i8, [7 x i8] }
%"std::thread::local::AccessError" = type { [0 x i8], {}, [0 x i8] }
%"core::cell::BorrowMutError" = type { [0 x i8], {}, [0 x i8] }
%"tokio::park::either::Either<std::io::error::Error, ()>" = type { [0 x i8], i8, [15 x i8] }
%"core::alloc::LayoutErr" = type { [0 x i8], {}, [0 x i8] }
%"mio::net::tcp::TcpListener" = type { [0 x i64], %"mio::poll::SelectorId", [0 x i32], i32, [1 x i32] }
%"mio::poll::SelectorId" = type { [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64] }
%"core::sync::atomic::AtomicUsize" = type { [0 x i64], i64, [0 x i64] }
%"core::result::Result<(), std::io::error::Error>" = type { [0 x i8], i8, [15 x i8] }
%"mio::poll::Poll" = type { [0 x i64], { i64, i32 }, [0 x i64], i64*, [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"std::sync::mutex::Mutex<()>", [0 x i64], %"std::sync::condvar::Condvar", [0 x i64] }
%"std::sync::mutex::Mutex<()>" = type { [0 x i64], %"std::sys_common::mutex::Mutex"*, [0 x i8], %"std::sys_common::poison::Flag", [0 x i8], %"core::cell::UnsafeCell<()>", [7 x i8] }
%"std::sys_common::mutex::Mutex" = type { [0 x i64], %"std::sys::unix::mutex::Mutex", [0 x i64] }
%"std::sys::unix::mutex::Mutex" = type { [0 x i64], %"core::cell::UnsafeCell<libc::unix::linux_like::linux::pthread_mutex_t>", [0 x i64] }
%"core::cell::UnsafeCell<libc::unix::linux_like::linux::pthread_mutex_t>" = type { [0 x i64], %"libc::unix::linux_like::linux::pthread_mutex_t", [0 x i64] }
%"libc::unix::linux_like::linux::pthread_mutex_t" = type { [0 x i8], [40 x i8], [0 x i8] }
%"std::sys_common::poison::Flag" = type { [0 x i8], %"core::sync::atomic::AtomicBool", [0 x i8] }
%"core::sync::atomic::AtomicBool" = type { [0 x i8], i8, [0 x i8] }
%"core::cell::UnsafeCell<()>" = type { [0 x i8], {}, [0 x i8] }
%"std::sync::condvar::Condvar" = type { [0 x i64], %"std::sys_common::condvar::Condvar"*, [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64] }
%"std::sys_common::condvar::Condvar" = type { [0 x i64], %"std::sys::unix::condvar::Condvar", [0 x i64] }
%"std::sys::unix::condvar::Condvar" = type { [0 x i64], %"core::cell::UnsafeCell<libc::unix::linux_like::linux::pthread_cond_t>", [0 x i64] }
%"core::cell::UnsafeCell<libc::unix::linux_like::linux::pthread_cond_t>" = type { [0 x i64], %"libc::unix::linux_like::linux::pthread_cond_t", [0 x i64] }
%"libc::unix::linux_like::linux::pthread_cond_t" = type { [0 x i8], [48 x i8], [0 x i8] }
%"mio::net::tcp::TcpStream" = type { [0 x i64], %"mio::poll::SelectorId", [0 x i32], i32, [1 x i32] }
%"core::sync::atomic::AtomicPtr<()>" = type { [0 x i64], i8*, [0 x i64] }
%"core::fmt::Arguments" = type { [0 x i64], { [0 x { [0 x i8]*, i64 }]*, i64 }, [0 x i64], { i64*, i64 }, [0 x i64], { [0 x { i8*, i8* }]*, i64 }, [0 x i64] }
%"core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>" = type { [0 x i64], i64, [2 x i64] }
%"tokio::task::core::Core<std::future::GenFuture<main::{{closure}}::{{closure}}>>" = type { [0 x i64], %"tokio::task::core::Stage<std::future::GenFuture<main::{{closure}}::{{closure}}>>", [0 x i64] }
%"tokio::task::core::Stage<std::future::GenFuture<main::{{closure}}::{{closure}}>>" = type { [0 x i64], i64, [23 x i64] }
%"core::task::wake::RawWakerVTable" = type { [0 x i64], { i8*, i64* } ({}*)*, [0 x i64], void ({}*)*, [0 x i64], void ({}*)*, [0 x i64], void ({}*)*, [0 x i64] }
%"core::result::Result<usize, std::io::error::Error>" = type { [0 x i64], i64, [2 x i64] }
%"std::io::error::Custom" = type { [0 x i64], { {}*, [3 x i64]* }, [0 x i8], i8, [7 x i8] }
%"mio::poll::ReadinessNode" = type { [0 x i64], %"mio::poll::AtomicState", [0 x i64], i64, [0 x i64], i64, [0 x i64], i64, [0 x i64], %"core::sync::atomic::AtomicPtr<mio::poll::ReadinessNode>", [0 x i64], %"core::sync::atomic::AtomicPtr<()>", [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i8], %"core::sync::atomic::AtomicBool", [7 x i8] }
%"mio::poll::AtomicState" = type { [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64] }
%"core::sync::atomic::AtomicPtr<mio::poll::ReadinessNode>" = type { [0 x i64], i64*, [0 x i64] }
%"core::option::Option<mio::net::tcp::TcpStream>" = type { [0 x i64], i64, [2 x i64] }
%"tokio::loom::std::atomic_usize::AtomicUsize" = type { [0 x i64], %"core::cell::UnsafeCell<core::sync::atomic::AtomicUsize>", [0 x i64] }
%"core::cell::UnsafeCell<core::sync::atomic::AtomicUsize>" = type { [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64] }
%"core::ops::generator::GeneratorState<(), core::result::Result<tokio::net::tcp::listener::TcpListener, std::io::error::Error>>" = type { [0 x i64], i64, [7 x i64] }
%"tokio::net::tcp::listener::TcpListener" = type { [0 x i64], %"tokio::io::poll_evented::PollEvented<mio::net::tcp::TcpListener>", [0 x i64] }
%"tokio::io::poll_evented::PollEvented<mio::net::tcp::TcpListener>" = type { [0 x i64], %"core::option::Option<mio::net::tcp::TcpListener>", [0 x i64], %"tokio::io::poll_evented::Inner", [0 x i64] }
%"core::option::Option<mio::net::tcp::TcpListener>" = type { [0 x i64], i64, [2 x i64] }
%"tokio::io::poll_evented::Inner" = type { [0 x i64], { i64*, i64 }, [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64] }
%"std::sync::mutex::Mutex<tokio::runtime::thread_pool::queue::global::Pointers>" = type { [0 x i64], %"std::sys_common::mutex::Mutex"*, [0 x i8], %"std::sys_common::poison::Flag", [7 x i8], { i64*, i64* }, [0 x i64] }
%"core::result::Result<(tokio::net::tcp::stream::TcpStream, std::net::addr::SocketAddr), std::io::error::Error>" = type { [0 x i64], i64, [11 x i64] }
%"tokio::net::tcp::stream::TcpStream" = type { [0 x i64], %"tokio::io::poll_evented::PollEvented<mio::net::tcp::TcpStream>", [0 x i64] }
%"tokio::io::poll_evented::PollEvented<mio::net::tcp::TcpStream>" = type { [0 x i64], %"core::option::Option<mio::net::tcp::TcpStream>", [0 x i64], %"tokio::io::poll_evented::Inner", [0 x i64] }
%"tokio::runtime::context::enter::DropGuard" = type { [0 x i64], %"core::option::Option<tokio::runtime::handle::Handle>", [0 x i64] }
%"core::option::Option<tokio::runtime::handle::Handle>" = type { [0 x i64], i64, [3 x i64] }
%"tokio::runtime::handle::Handle" = type { [0 x i8], {}, [0 x i8], {}, [0 x i8], { i64, i8* }, [0 x i64], i64*, [0 x i64], i64*, [0 x i64] }
%"tokio::runtime::thread_pool::shared::Shared" = type { [0 x i64], i64*, [0 x i64], %"tokio::task::stack::TransferStack<tokio::runtime::thread_pool::shared::Shared>", [0 x i64], %"tokio::runtime::thread_pool::slice::Set"*, [0 x i64] }
%"tokio::task::stack::TransferStack<tokio::runtime::thread_pool::shared::Shared>" = type { [0 x i8], %"core::marker::PhantomData<tokio::runtime::thread_pool::shared::Shared>", [0 x i8], %"core::sync::atomic::AtomicPtr<tokio::task::core::Header>", [0 x i64] }
%"core::marker::PhantomData<tokio::runtime::thread_pool::shared::Shared>" = type {}
%"core::sync::atomic::AtomicPtr<tokio::task::core::Header>" = type { [0 x i64], i64*, [0 x i64] }
%"tokio::runtime::thread_pool::slice::Set" = type { [0 x i64], { [0 x %"tokio::runtime::thread_pool::shared::Shared"]*, i64 }, [0 x i64], { [0 x %"core::cell::UnsafeCell<tokio::util::pad::CachePadded<tokio::runtime::thread_pool::owned::Owned>>"]*, i64 }, [0 x i64], i64*, [0 x i64], %"tokio::runtime::thread_pool::idle::Idle", [0 x i64] }
%"core::cell::UnsafeCell<tokio::util::pad::CachePadded<tokio::runtime::thread_pool::owned::Owned>>" = type { [0 x i64], %"tokio::util::pad::CachePadded<tokio::runtime::thread_pool::owned::Owned>", [0 x i64] }
%"tokio::util::pad::CachePadded<tokio::runtime::thread_pool::owned::Owned>" = type { [0 x i64], %"tokio::runtime::thread_pool::owned::Owned", [9 x i64] }
%"tokio::runtime::thread_pool::owned::Owned" = type { [0 x i64], %"tokio::loom::std::atomic_usize::AtomicUsize", [0 x i64], %"tokio::runtime::thread_pool::queue::worker::Worker<tokio::runtime::thread_pool::shared::Shared>", [0 x i64], i64*, [0 x i32], { i32, i32 }, [0 x i16], i16, [0 x i8], i8, [0 x i8], i8, [0 x i8], i8, [0 x i8], i8, [2 x i8] }
%"tokio::runtime::thread_pool::queue::worker::Worker<tokio::runtime::thread_pool::shared::Shared>" = type { [0 x i64], i64*, [0 x i64], i64*, [0 x i16], i16, [3 x i16] }
%"tokio::runtime::thread_pool::idle::Idle" = type { [0 x i64], %"tokio::loom::std::atomic_usize::AtomicUsize", [0 x i64], %"std::sync::mutex::Mutex<alloc::vec::Vec<usize>>", [0 x i64], i64, [0 x i64] }
%"std::sync::mutex::Mutex<alloc::vec::Vec<usize>>" = type { [0 x i64], %"std::sys_common::mutex::Mutex"*, [0 x i8], %"std::sys_common::poison::Flag", [7 x i8], %"core::cell::UnsafeCell<alloc::vec::Vec<usize>>", [0 x i64] }
%"core::cell::UnsafeCell<alloc::vec::Vec<usize>>" = type { [0 x i64], %"alloc::vec::Vec<usize>", [0 x i64] }
%"alloc::vec::Vec<usize>" = type { [0 x i64], { i64*, i64 }, [0 x i64], i64, [0 x i64] }
%"core::result::Result<std::sync::mutex::MutexGuard<tokio::task::queue::RemoteQueue<tokio::runtime::basic_scheduler::SchedulerPriv>>, std::sys_common::poison::PoisonError<std::sync::mutex::MutexGuard<tokio::task::queue::RemoteQueue<tokio::runtime::basic_scheduler::SchedulerPriv>>>>" = type { [0 x i64], i64, [2 x i64] }
%"std::sync::mutex::Mutex<tokio::task::queue::RemoteQueue<tokio::runtime::basic_scheduler::SchedulerPriv>>" = type { [0 x i64], %"std::sys_common::mutex::Mutex"*, [0 x i8], %"std::sys_common::poison::Flag", [7 x i8], %"core::cell::UnsafeCell<tokio::task::queue::RemoteQueue<tokio::runtime::basic_scheduler::SchedulerPriv>>", [0 x i64] }
%"core::cell::UnsafeCell<tokio::task::queue::RemoteQueue<tokio::runtime::basic_scheduler::SchedulerPriv>>" = type { [0 x i64], %"tokio::task::queue::RemoteQueue<tokio::runtime::basic_scheduler::SchedulerPriv>", [0 x i64] }
%"tokio::task::queue::RemoteQueue<tokio::runtime::basic_scheduler::SchedulerPriv>" = type { [0 x i64], %"alloc::collections::vec_deque::VecDeque<tokio::task::Task<tokio::runtime::basic_scheduler::SchedulerPriv>>", [0 x i8], i8, [7 x i8] }
%"alloc::collections::vec_deque::VecDeque<tokio::task::Task<tokio::runtime::basic_scheduler::SchedulerPriv>>" = type { [0 x i64], i64, [0 x i64], i64, [0 x i64], { i64*, i64 }, [0 x i64] }
%"alloc::vec::Vec<u8>" = type { [0 x i64], { i8*, i64 }, [0 x i64], i64, [0 x i64] }
%"core::result::Result<(), tokio::task::error::JoinError>" = type { [0 x i64], i64, [4 x i64] }
%"core::panic::Location" = type { [0 x i64], { [0 x i8]*, i64 }, [0 x i32], i32, [0 x i32], i32, [0 x i32] }
%"tokio::io::util::read_line::ReadLine<tokio::io::util::buf_reader::BufReader<tokio::net::tcp::split::ReadHalf>>" = type { [0 x i64], %"tokio::io::util::buf_reader::BufReader<tokio::net::tcp::split::ReadHalf>"*, [0 x i64], %"alloc::string::String"*, [0 x i64], %"alloc::vec::Vec<u8>", [0 x i64], i64, [0 x i64] }
%"tokio::io::util::buf_reader::BufReader<tokio::net::tcp::split::ReadHalf>" = type { [0 x i64], i64*, [0 x i64], { [0 x i8]*, i64 }, [0 x i64], i64, [0 x i64], i64, [0 x i64] }
%"alloc::string::String" = type { [0 x i64], %"alloc::vec::Vec<u8>", [0 x i64] }
%"core::ops::generator::GeneratorState<(), core::result::Result<(), alloc::boxed::Box<std::error::Error>>>" = type { [0 x i64], i64, [2 x i64] }
%"tokio::sync::task::atomic_waker::AtomicWaker" = type { [0 x i64], %"tokio::loom::std::atomic_usize::AtomicUsize", [0 x i64], { i8*, i64* }, [0 x i64] }
%"tokio::net::addr::sealed::MaybeReady" = type { [0 x i32], i32, [9 x i32] }
%"tokio::task::core::Header" = type { [0 x i64], %"tokio::task::state::State", [0 x i64], i8*, [0 x i64], i64*, [0 x i64], i64*, [0 x i64], i64*, [0 x i64], %"tokio::task::raw::Vtable"*, [0 x i8], %"tokio::loom::std::causal_cell::CausalCell<()>", [0 x i8] }
%"tokio::task::state::State" = type { [0 x i64], %"tokio::loom::std::atomic_usize::AtomicUsize", [0 x i64] }
%"tokio::task::raw::Vtable" = type { [0 x i64], i1 ({}*, {}*, [3 x i64]*)*, [0 x i64], void ({}*)*, [0 x i64], void ({}*, {}*, i64)*, [0 x i64], i64 ({}*, { i8*, i64* }*)*, [0 x i64], i64 ({}*, { i8*, i64* }*, i64)*, [0 x i64], void ({}*)*, [0 x i64], void ({}*, i1)*, [0 x i64] }
%"tokio::loom::std::causal_cell::CausalCell<()>" = type { [0 x i8], %"core::cell::UnsafeCell<()>", [0 x i8] }
%"tokio::io::driver::Inner" = type { [0 x i64], %"mio::poll::Poll", [0 x i64], %"tokio::util::slab::Slab<tokio::io::driver::scheduled_io::ScheduledIo>", [0 x i64], %"tokio::loom::std::atomic_usize::AtomicUsize", [0 x i64], i64*, [0 x i64] }
%"tokio::util::slab::Slab<tokio::io::driver::scheduled_io::ScheduledIo>" = type { [0 x i64], %"tokio::util::slab::shard::Shard<tokio::io::driver::scheduled_io::ScheduledIo>", [0 x i64], %"std::sync::mutex::Mutex<()>", [0 x i64] }
%"tokio::util::slab::shard::Shard<tokio::io::driver::scheduled_io::ScheduledIo>" = type { [0 x i64], { [0 x i64]*, i64 }, [0 x i64], { [0 x %"tokio::util::slab::page::Shared<tokio::io::driver::scheduled_io::ScheduledIo>"]*, i64 }, [0 x i64] }
%"tokio::util::slab::page::Shared<tokio::io::driver::scheduled_io::ScheduledIo>" = type { [0 x i64], %"tokio::util::slab::stack::TransferStack", [0 x i64], i64, [0 x i64], i64, [0 x i64], { i64*, i64 }, [0 x i64] }
%"tokio::util::slab::stack::TransferStack" = type { [0 x i64], %"tokio::loom::std::atomic_usize::AtomicUsize", [0 x i64] }
%"std::future::GenFuture<tokio::net::tcp::listener::{{impl}}::bind::{{closure}}<&str>>" = type { [0 x i64], %"tokio::net::tcp::listener::{{impl}}::bind::{{closure}}<&str>", [0 x i64] }
%"tokio::net::tcp::listener::{{impl}}::bind::{{closure}}<&str>" = type { [0 x i64], { [0 x i8]*, i64 }, [14 x i32], i32, [1 x i32] }
%"tokio::util::slab::slot::Slot<tokio::io::driver::scheduled_io::ScheduledIo>" = type { [0 x i64], i64, [0 x i64], %"tokio::io::driver::scheduled_io::ScheduledIo", [0 x i64] }
%"tokio::io::driver::scheduled_io::ScheduledIo" = type { [0 x i64], %"tokio::loom::std::atomic_usize::AtomicUsize", [0 x i64], %"tokio::sync::task::atomic_waker::AtomicWaker", [0 x i64], %"tokio::sync::task::atomic_waker::AtomicWaker", [0 x i64] }
%"tokio::park::either::Either<tokio::io::driver::Driver, tokio::park::thread::ParkThread>" = type { [0 x i64], i64, [5 x i64] }
%"std::future::GenFuture<main::{{closure}}::{{closure}}>" = type { [0 x i64], %"main::{{closure}}::{{closure}}", [0 x i64] }
%"main::{{closure}}::{{closure}}" = type { [0 x i64], %"tokio::net::tcp::stream::TcpStream", [18 x i32], i32, [13 x i32] }
%"core::ops::generator::GeneratorState<(), core::result::Result<(tokio::net::tcp::stream::TcpStream, std::net::addr::SocketAddr), std::io::error::Error>>" = type { [0 x i64], i64, [11 x i64] }
%"core::option::Option<std::io::error::Error>" = type { [0 x i8], i8, [15 x i8] }
%"tokio::runtime::builder::Builder" = type { [0 x i64], { i64, i64 }, [0 x i64], i64, [0 x i64], %"alloc::string::String", [0 x i64], { i64, i64 }, [0 x i64], { i64*, i8* }, [0 x i64], { i64*, i8* }, [0 x i8], i8, [0 x i8], i8, [0 x i8], i8, [5 x i8] }
%"tokio::runtime::enter::Enter" = type { [0 x i8], %"core::marker::PhantomData<core::cell::RefCell<()>>", [0 x i8] }
%"core::marker::PhantomData<core::cell::RefCell<()>>" = type {}
%"tokio::runtime::thread_pool::queue::global::Queue<tokio::runtime::thread_pool::shared::Shared>" = type { [0 x i8], %"core::marker::PhantomData<tokio::runtime::thread_pool::shared::Shared>", [0 x i8], %"std::sync::mutex::Mutex<tokio::runtime::thread_pool::queue::global::Pointers>", [0 x i64], %"tokio::loom::std::atomic_usize::AtomicUsize", [0 x i64] }
%"std::future::GenFuture<main::{{closure}}>" = type { [0 x i64], %"main::{{closure}}", [0 x i64] }
%"main::{{closure}}" = type { [0 x i32], i32, [23 x i32] }
%"tokio::runtime::context::enter::{{closure}}<tokio::runtime::{{impl}}::block_on::{{closure}}<std::future::GenFuture<main::{{closure}}>>, core::result::Result<(), alloc::boxed::Box<std::error::Error>>>" = type { [0 x i64], %"tokio::runtime::handle::Handle", [0 x i64] }
%"tokio::runtime::thread_pool::queue::local::Queue<tokio::runtime::thread_pool::shared::Shared>" = type { [0 x i64], { [0 x i8*]*, i64 }, [0 x i32], %"tokio::loom::std::atomic_u32::AtomicU32", [0 x i32], %"tokio::loom::std::atomic_u32::AtomicU32", [0 x i32] }
%"tokio::loom::std::atomic_u32::AtomicU32" = type { [0 x i32], %"core::cell::UnsafeCell<core::sync::atomic::AtomicU32>", [0 x i32] }
%"core::cell::UnsafeCell<core::sync::atomic::AtomicU32>" = type { [0 x i32], %"core::sync::atomic::AtomicU32", [0 x i32] }
%"core::sync::atomic::AtomicU32" = type { [0 x i32], i32, [0 x i32] }
%"core::result::Result<tokio::net::tcp::listener::TcpListener, std::io::error::Error>" = type { [0 x i64], i64, [7 x i64] }
%"tokio::runtime::Runtime" = type { [0 x i64], %"tokio::runtime::Kind", [0 x i64], %"tokio::runtime::handle::Handle", [0 x i64], { i64*, i64* }, [0 x i64] }
%"tokio::runtime::Kind" = type { [0 x i64], i64, [8 x i64] }
%"tokio::task::queue::MpscQueues<tokio::runtime::basic_scheduler::SchedulerPriv>" = type { [0 x i64], i64*, [0 x i64], %"core::cell::UnsafeCell<alloc::collections::vec_deque::VecDeque<tokio::task::Task<tokio::runtime::basic_scheduler::SchedulerPriv>>>", [0 x i64], %"std::sync::mutex::Mutex<tokio::task::queue::RemoteQueue<tokio::runtime::basic_scheduler::SchedulerPriv>>", [0 x i64], %"tokio::task::stack::TransferStack<tokio::runtime::basic_scheduler::SchedulerPriv>", [0 x i64] }
%"core::cell::UnsafeCell<alloc::collections::vec_deque::VecDeque<tokio::task::Task<tokio::runtime::basic_scheduler::SchedulerPriv>>>" = type { [0 x i64], %"alloc::collections::vec_deque::VecDeque<tokio::task::Task<tokio::runtime::basic_scheduler::SchedulerPriv>>", [0 x i64] }
%"tokio::task::stack::TransferStack<tokio::runtime::basic_scheduler::SchedulerPriv>" = type { [0 x i8], %"core::marker::PhantomData<tokio::runtime::basic_scheduler::SchedulerPriv>", [0 x i8], %"core::sync::atomic::AtomicPtr<tokio::task::core::Header>", [0 x i64] }
%"core::marker::PhantomData<tokio::runtime::basic_scheduler::SchedulerPriv>" = type {}
%"tokio::io::driver::Driver" = type { [0 x i64], %"mio::poll::Events", [0 x i64], i64*, [0 x i64], i64*, [0 x i64] }
%"mio::poll::Events" = type { [0 x i64], %"mio::sys::unix::epoll::Events", [0 x i64] }
%"mio::sys::unix::epoll::Events" = type { [0 x i64], %"alloc::vec::Vec<libc::unix::linux_like::epoll_event>", [0 x i64] }
%"alloc::vec::Vec<libc::unix::linux_like::epoll_event>" = type { [0 x i64], { i8*, i64 }, [0 x i64], i64, [0 x i64] }
%"tokio::runtime::basic_scheduler::LocalState<tokio::park::either::Either<tokio::io::driver::Driver, tokio::park::thread::ParkThread>>" = type { [0 x i64], %"tokio::park::either::Either<tokio::io::driver::Driver, tokio::park::thread::ParkThread>", [0 x i8], i8, [7 x i8] }
%"tokio::runtime::{{impl}}::block_on::{{closure}}<std::future::GenFuture<main::{{closure}}>>" = type { [0 x i64], %"tokio::runtime::Kind"**, [0 x i64], %"std::future::GenFuture<main::{{closure}}>", [0 x i64] }
%"tokio::net::addr::sealed::OneOrMore" = type { [0 x i32], i32, [9 x i32] }
%"std::net::addr::SocketAddr" = type { [0 x i32], i32, [7 x i32] }
%"alloc::sync::ArcInner<tokio::runtime::park::Inner>" = type { [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"tokio::runtime::park::Inner", [0 x i64] }
%"tokio::runtime::park::Inner" = type { [0 x i64], %"tokio::loom::std::atomic_usize::AtomicUsize", [0 x i64], %"std::sync::mutex::Mutex<()>", [0 x i64], %"std::sync::condvar::Condvar", [0 x i64], i64*, [0 x i64] }
%"alloc::sync::ArcInner<tokio::runtime::blocking::pool::Inner>" = type { [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"tokio::runtime::blocking::pool::Inner", [0 x i64] }
%"tokio::runtime::blocking::pool::Inner" = type { [0 x i64], %"std::sync::mutex::Mutex<tokio::runtime::blocking::pool::Shared>", [0 x i64], %"std::sync::condvar::Condvar", [0 x i64], %"alloc::string::String", [0 x i64], { i64, i64 }, [0 x i64], { i64*, i8* }, [0 x i64], { i64*, i8* }, [0 x i64], i64, [0 x i64] }
%"std::sync::mutex::Mutex<tokio::runtime::blocking::pool::Shared>" = type { [0 x i64], %"std::sys_common::mutex::Mutex"*, [0 x i8], %"std::sys_common::poison::Flag", [7 x i8], %"core::cell::UnsafeCell<tokio::runtime::blocking::pool::Shared>", [0 x i64] }
%"core::cell::UnsafeCell<tokio::runtime::blocking::pool::Shared>" = type { [0 x i64], %"tokio::runtime::blocking::pool::Shared", [0 x i64] }
%"tokio::runtime::blocking::pool::Shared" = type { [0 x i64], %"alloc::collections::vec_deque::VecDeque<tokio::task::Task<tokio::runtime::blocking::schedule::NoopSchedule>>", [0 x i64], i64, [0 x i64], i64*, [0 x i32], i32, [0 x i32], i32, [0 x i8], i8, [7 x i8] }
%"alloc::collections::vec_deque::VecDeque<tokio::task::Task<tokio::runtime::blocking::schedule::NoopSchedule>>" = type { [0 x i64], i64, [0 x i64], i64, [0 x i64], { i64*, i64 }, [0 x i64] }
%"alloc::sync::ArcInner<tokio::park::thread::Inner>" = type { [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"tokio::park::thread::Inner", [0 x i64] }
%"tokio::park::thread::Inner" = type { [0 x i64], %"tokio::loom::std::atomic_usize::AtomicUsize", [0 x i64], %"std::sync::mutex::Mutex<()>", [0 x i64], %"std::sync::condvar::Condvar", [0 x i64] }
%"alloc::sync::ArcInner<tokio::runtime::thread_pool::queue::Cluster<tokio::runtime::thread_pool::shared::Shared>>" = type { [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"tokio::runtime::thread_pool::queue::Cluster<tokio::runtime::thread_pool::shared::Shared>", [0 x i64] }
%"tokio::runtime::thread_pool::queue::Cluster<tokio::runtime::thread_pool::shared::Shared>" = type { [0 x i64], { [0 x %"tokio::runtime::thread_pool::queue::local::Queue<tokio::runtime::thread_pool::shared::Shared>"]*, i64 }, [0 x i64], %"tokio::runtime::thread_pool::queue::global::Queue<tokio::runtime::thread_pool::shared::Shared>", [0 x i64] }
%"alloc::sync::ArcInner<mio::poll::ReadinessQueueInner>" = type { [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"mio::poll::ReadinessQueueInner", [0 x i64] }
%"mio::poll::ReadinessQueueInner" = type { [0 x i64], %"core::sync::atomic::AtomicPtr<mio::poll::ReadinessNode>", [0 x i64], i64*, [0 x i64], %"mio::poll::ReadinessNode"*, [0 x i64], %"mio::poll::ReadinessNode"*, [0 x i64], %"mio::poll::ReadinessNode"*, [0 x i32], { i32, i32 }, [0 x i32] }
%"alloc::sync::ArcInner<tokio::io::driver::Inner>" = type { [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"tokio::io::driver::Inner", [0 x i64] }
%"alloc::sync::ArcInner<tokio::runtime::basic_scheduler::SchedulerPriv>" = type { [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"tokio::runtime::basic_scheduler::SchedulerPriv", [0 x i64] }
%"tokio::runtime::basic_scheduler::SchedulerPriv" = type { [0 x i64], %"tokio::task::queue::MpscQueues<tokio::runtime::basic_scheduler::SchedulerPriv>", [0 x i64], { {}*, [3 x i64]* }, [0 x i64] }
%"alloc::sync::ArcInner<tokio::runtime::park::Shared>" = type { [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"tokio::runtime::park::Shared", [0 x i64] }
%"tokio::runtime::park::Shared" = type { [0 x i64], %"tokio::util::try_lock::TryLock<tokio::park::either::Either<tokio::io::driver::Driver, tokio::park::thread::ParkThread>>", [0 x i64], { i64, i8* }, [0 x i64] }
%"tokio::util::try_lock::TryLock<tokio::park::either::Either<tokio::io::driver::Driver, tokio::park::thread::ParkThread>>" = type { [0 x i64], %"core::cell::UnsafeCell<tokio::park::either::Either<tokio::io::driver::Driver, tokio::park::thread::ParkThread>>", [0 x i8], %"core::sync::atomic::AtomicBool", [7 x i8] }
%"core::cell::UnsafeCell<tokio::park::either::Either<tokio::io::driver::Driver, tokio::park::thread::ParkThread>>" = type { [0 x i64], %"tokio::park::either::Either<tokio::io::driver::Driver, tokio::park::thread::ParkThread>", [0 x i64] }
%"alloc::sync::ArcInner<tokio::runtime::thread_pool::slice::Set>" = type { [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"tokio::runtime::thread_pool::slice::Set", [0 x i64] }
%"alloc::sync::ArcInner<core::ops::function::Fn<(), Output=()>>" = type { [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i8], {} }
%"alloc::sync::ArcInner<tokio::sync::oneshot::Inner<()>>" = type { [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"tokio::sync::oneshot::Inner<()>", [0 x i64] }
%"tokio::sync::oneshot::Inner<()>" = type { [0 x i64], %"tokio::loom::std::atomic_usize::AtomicUsize", [0 x i64], { i8*, i8* }, [0 x i64], { i8*, i8* }, [0 x i8], i8, [7 x i8] }
%"alloc::sync::ArcInner<tokio::sync::oneshot::Sender<()>>" = type { [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], %"core::sync::atomic::AtomicUsize", [0 x i64], i64*, [0 x i64] }
%"tokio::loom::std::alloc::Track<core::result::Result<(), tokio::task::error::JoinError>>" = type { [0 x i64], %"core::result::Result<(), tokio::task::error::JoinError>", [0 x i64] }
%"tokio::task::error::JoinError" = type { [0 x i64], %"tokio::task::error::Repr", [0 x i64] }
%"tokio::task::error::Repr" = type { [0 x i64], {}*, [3 x i64] }
%"std::panicking::try::Data<std::panic::AssertUnwindSafe<tokio::task::harness::{{impl}}::poll::{{closure}}::{{closure}}<std::future::GenFuture<main::{{closure}}::{{closure}}>, tokio::runtime::thread_pool::shared::Shared>>, core::task::poll::Poll<()>>" = type { [2 x i64] }
%"std::panicking::try::Data<std::panic::AssertUnwindSafe<tokio::task::harness::{{impl}}::poll::{{closure}}::{{closure}}<std::future::GenFuture<main::{{closure}}::{{closure}}>, tokio::runtime::basic_scheduler::SchedulerPriv>>, core::task::poll::Poll<()>>" = type { [2 x i64] }
%"core::task::poll::Poll<core::result::Result<(), alloc::boxed::Box<std::error::Error>>>" = type { [0 x i64], i64, [2 x i64] }
%"core::task::poll::Poll<core::result::Result<(tokio::net::tcp::stream::TcpStream, std::net::addr::SocketAddr), std::io::error::Error>>" = type { [0 x i64], i64, [11 x i64] }
%"core::option::Option<std::net::addr::SocketAddr>" = type { [0 x i32], i32, [7 x i32] }
%"core::task::poll::Poll<core::result::Result<tokio::net::addr::sealed::OneOrMore, std::io::error::Error>>" = type { [0 x i64], i64, [5 x i64] }
%"core::result::Result<tokio::net::addr::sealed::OneOrMore, std::io::error::Error>" = type { [0 x i64], i64, [5 x i64] }
%"std::future::GenFuture<tokio::net::tcp::listener::{{impl}}::accept::{{closure}}>" = type { [0 x i64], %"tokio::net::tcp::listener::{{impl}}::accept::{{closure}}", [0 x i64] }
%"tokio::net::tcp::listener::{{impl}}::accept::{{closure}}" = type { [0 x i64], %"tokio::net::tcp::listener::TcpListener"*, [4 x i32], i32, [1 x i32] }
%"core::result::Result<&str, core::str::Utf8Error>" = type { [0 x i64], i64, [2 x i64] }
%"std::fs::OpenOptions" = type { [0 x i32], %"std::sys::unix::fs::OpenOptions", [0 x i32] }
%"std::sys::unix::fs::OpenOptions" = type { [0 x i32], i32, [0 x i32], i32, [0 x i8], i8, [0 x i8], i8, [0 x i8], i8, [0 x i8], i8, [0 x i8], i8, [0 x i8], i8, [2 x i8] }
%"core::result::Result<std::fs::File, std::io::error::Error>" = type { [0 x i32], i32, [5 x i32] }
%"std::path::Path" = type { [0 x i8], %"std::ffi::os_str::OsStr" }
%"std::ffi::os_str::OsStr" = type { [0 x i8], %"std::sys_common::os_str_bytes::Slice" }
%"std::sys_common::os_str_bytes::Slice" = type { [0 x i8], [0 x i8] }
%"core::result::Result<tokio::runtime::Runtime, std::io::error::Error>" = type { [0 x i64], i64, [15 x i64] }
%"tokio::park::thread::CachedParkThread" = type { [0 x i8], %"core::marker::PhantomData<alloc::rc::Rc<()>>", [0 x i8] }
%"core::marker::PhantomData<alloc::rc::Rc<()>>" = type {}
%"unwind::libunwind::_Unwind_Exception" = type { [0 x i64], i64, [0 x i64], void (i32, %"unwind::libunwind::_Unwind_Exception"*)*, [0 x i64], [6 x i64], [0 x i64] }
%"unwind::libunwind::_Unwind_Context" = type { [0 x i8] }

@anon.112aa5216417f3e30cbfa40815f3b444.0 = private unnamed_addr constant <{ [34 x i8] }> <{ [34 x i8] c"stream did not contain valid UTF-8" }>, align 1
@vtable.0 = private unnamed_addr constant { void (i8**)*, i64, i64, i32 (i8**)*, i32 (i8**)*, i32 (i8**)* } { void (i8**)* @_ZN4core3ptr18real_drop_in_place17h17dac8a9e600688dE, i64 8, i64 8, i32 (i8**)* @"_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h0ea676343dfb611dE", i32 (i8**)* @"_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h0ea676343dfb611dE", i32 (i8**)* @"_ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17h3e432dc8d786e559E" }, align 8
@vtable.1 = private unnamed_addr constant { void (%"std::io::error::Error"*)*, i64, i64, { [0 x i8]*, i64 } (%"std::io::error::Error"*)*, { i8*, i8* } (%"std::io::error::Error"*)*, { i8*, i8* } (%"std::io::error::Error"*)*, i64 (%"std::io::error::Error"*)*, i64* (%"std::io::error::Error"*)*, i1 (%"std::io::error::Error"*, %"core::fmt::Formatter"*)*, i1 (%"std::io::error::Error"*, %"core::fmt::Formatter"*)* } { void (%"std::io::error::Error"*)* @_ZN4core3ptr18real_drop_in_place17h664ae0e66d8bb2d1E, i64 16, i64 8, { [0 x i8]*, i64 } (%"std::io::error::Error"*)* @"_ZN59_$LT$std..io..error..Error$u20$as$u20$std..error..Error$GT$11description17he40877cea95c4584E", { i8*, i8* } (%"std::io::error::Error"*)* @"_ZN59_$LT$std..io..error..Error$u20$as$u20$std..error..Error$GT$5cause17hddd36968f8f5a547E", { i8*, i8* } (%"std::io::error::Error"*)* @"_ZN59_$LT$std..io..error..Error$u20$as$u20$std..error..Error$GT$6source17he73be4a4d7732f87E", i64 (%"std::io::error::Error"*)* @_ZN3std5error5Error7type_id17h59d9d71ba629941fE, i64* (%"std::io::error::Error"*)* @_ZN3std5error5Error9backtrace17he692434e154190d0E, i1 (%"std::io::error::Error"*, %"core::fmt::Formatter"*)* @"_ZN60_$LT$std..io..error..Error$u20$as$u20$core..fmt..Display$GT$3fmt17ha002db5de735283eE", i1 (%"std::io::error::Error"*, %"core::fmt::Formatter"*)* @"_ZN58_$LT$std..io..error..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h80d51771597be04eE" }, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.1 = private unnamed_addr constant <{ [100 x i8] }> <{ [100 x i8] c"TLS Context not set. This is a rustc bug. Please file an issue on https://github.com/rust-lang/rust." }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.2 = private unnamed_addr constant <{ [70 x i8] }> <{ [70 x i8] c"cannot access a Thread Local Storage value during or after destruction" }>, align 1
@vtable.2 = private unnamed_addr constant { void ({ i8*, i64 }*)*, i64, i64, { {}*, [3 x i64]* } ({ i8*, i64 }*)*, { {}*, [3 x i64]* } ({ i8*, i64 }*)* } { void ({ i8*, i64 }*)* bitcast (void ({ [0 x i8]*, i64 }*)* @_ZN4core3ptr18real_drop_in_place17h2c3b0f290c9aa1b2E to void ({ i8*, i64 }*)*), i64 16, i64 8, { {}*, [3 x i64]* } ({ i8*, i64 }*)* @"_ZN91_$LT$std..panicking..begin_panic..PanicPayload$LT$A$GT$$u20$as$u20$core..panic..BoxMeUp$GT$8take_box17hac6307d4e5f1ec34E", { {}*, [3 x i64]* } ({ i8*, i64 }*)* @"_ZN91_$LT$std..panicking..begin_panic..PanicPayload$LT$A$GT$$u20$as$u20$core..panic..BoxMeUp$GT$3get17ha5c708c3e23a8ee2E" }, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.3 = private unnamed_addr constant <{ [2 x i8] }> <{ [2 x i8] c"()" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.4 = private unnamed_addr constant <{ [16 x i8] }> <{ [16 x i8] c"already borrowed" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.5 = private unnamed_addr constant <{ [73 x i8] }> <{ [73 x i8] c"/rustc/5e1a799842ba6ed4a57e91f7ab9435947482f7d8/src/libcore/macros/mod.rs" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.6 = private unnamed_addr constant <{ i8*, [16 x i8] }> <{ i8* getelementptr inbounds (<{ [73 x i8] }>, <{ [73 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.5, i32 0, i32 0, i32 0), [16 x i8] c"I\00\00\00\00\00\00\00\0F\00\00\00(\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.7 = private unnamed_addr constant <{ [28 x i8] }> <{ [28 x i8] c"assertion failed: mid <= len" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.8 = private unnamed_addr constant <{ [43 x i8] }> <{ [43 x i8] c"called `Option::unwrap()` on a `None` value" }>, align 1
@vtable.3 = private unnamed_addr constant { void (%"std::thread::local::AccessError"*)*, i64, i64, i1 (%"std::thread::local::AccessError"*, %"core::fmt::Formatter"*)* } { void (%"std::thread::local::AccessError"*)* @_ZN4core3ptr18real_drop_in_place17h801f84abd31e57b7E, i64 0, i64 1, i1 (%"std::thread::local::AccessError"*, %"core::fmt::Formatter"*)* @"_ZN68_$LT$std..thread..local..AccessError$u20$as$u20$core..fmt..Debug$GT$3fmt17he87ee9ea4512019bE" }, align 8
@vtable.4 = private unnamed_addr constant { void (%"std::io::error::Error"*)*, i64, i64, i1 (%"std::io::error::Error"*, %"core::fmt::Formatter"*)* } { void (%"std::io::error::Error"*)* @_ZN4core3ptr18real_drop_in_place17h664ae0e66d8bb2d1E, i64 16, i64 8, i1 (%"std::io::error::Error"*, %"core::fmt::Formatter"*)* @"_ZN58_$LT$std..io..error..Error$u20$as$u20$core..fmt..Debug$GT$3fmt17h80d51771597be04eE" }, align 8
@vtable.5 = private unnamed_addr constant { void (%"core::cell::BorrowMutError"*)*, i64, i64, i1 (%"core::cell::BorrowMutError"*, %"core::fmt::Formatter"*)* } { void (%"core::cell::BorrowMutError"*)* bitcast (void (%"std::thread::local::AccessError"*)* @_ZN4core3ptr18real_drop_in_place17h801f84abd31e57b7E to void (%"core::cell::BorrowMutError"*)*), i64 0, i64 1, i1 (%"core::cell::BorrowMutError"*, %"core::fmt::Formatter"*)* @"_ZN63_$LT$core..cell..BorrowMutError$u20$as$u20$core..fmt..Debug$GT$3fmt17he84d908d86d62dc0E" }, align 8
@vtable.6 = private unnamed_addr constant { void ({}*)*, i64, i64, i1 ({}*, %"core::fmt::Formatter"*)* } { void ({}*)* bitcast (void (%"std::thread::local::AccessError"*)* @_ZN4core3ptr18real_drop_in_place17h801f84abd31e57b7E to void ({}*)*), i64 0, i64 1, i1 ({}*, %"core::fmt::Formatter"*)* @"_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17he0b7e4faabc5658fE" }, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.9 = private unnamed_addr constant <{ [43 x i8] }> <{ [43 x i8] c"called `Result::unwrap()` on an `Err` value" }>, align 1
@vtable.7 = private unnamed_addr constant { void ({ i64*, i8 }*)*, i64, i64, i1 ({ i64*, i8 }*, %"core::fmt::Formatter"*)* } { void ({ i64*, i8 }*)* @_ZN4core3ptr18real_drop_in_place17h66967e7ef667e5e9E, i64 16, i64 8, i1 ({ i64*, i8 }*, %"core::fmt::Formatter"*)* @"_ZN82_$LT$std..sys_common..poison..PoisonError$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17hf9cbaa475d0c625bE" }, align 8
@vtable.8 = private unnamed_addr constant { void (%"tokio::park::either::Either<std::io::error::Error, ()>"*)*, i64, i64, i1 (%"tokio::park::either::Either<std::io::error::Error, ()>"*, %"core::fmt::Formatter"*)* } { void (%"tokio::park::either::Either<std::io::error::Error, ()>"*)* @_ZN4core3ptr18real_drop_in_place17hb375d059e9ff58beE, i64 16, i64 8, i1 (%"tokio::park::either::Either<std::io::error::Error, ()>"*, %"core::fmt::Formatter"*)* @"_ZN77_$LT$tokio..park..either..Either$LT$A$C$B$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h512c0ff93e9d314dE" }, align 8
@vtable.9 = private unnamed_addr constant { void (%"core::alloc::LayoutErr"*)*, i64, i64, i1 (%"core::alloc::LayoutErr"*, %"core::fmt::Formatter"*)* } { void (%"core::alloc::LayoutErr"*)* bitcast (void (%"std::thread::local::AccessError"*)* @_ZN4core3ptr18real_drop_in_place17h801f84abd31e57b7E to void (%"core::alloc::LayoutErr"*)*), i64 0, i64 1, i1 (%"core::alloc::LayoutErr"*, %"core::fmt::Formatter"*)* @"_ZN59_$LT$core..alloc..LayoutErr$u20$as$u20$core..fmt..Debug$GT$3fmt17h851cba66435ade30E" }, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.10 = private unnamed_addr constant <{ [36 x i8] }> <{ [36 x i8] c"Tried to shrink to a larger capacity" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.11 = private unnamed_addr constant <{ [30 x i8] }> <{ [30 x i8] c"<::core::macros::panic macros>" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.12 = private unnamed_addr constant <{ i8*, [16 x i8] }> <{ i8* getelementptr inbounds (<{ [30 x i8] }>, <{ [30 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.11, i32 0, i32 0, i32 0), [16 x i8] c"\1E\00\00\00\00\00\00\00\03\00\00\00\0A\00\00\00" }>, align 8
@vtable.a = private unnamed_addr constant { void (%"mio::net::tcp::TcpListener"*)*, i64, i64, void (%"core::result::Result<(), std::io::error::Error>"*, %"mio::net::tcp::TcpListener"*, %"mio::poll::Poll"*, i64, i64, i64)*, void (%"core::result::Result<(), std::io::error::Error>"*, %"mio::net::tcp::TcpListener"*, %"mio::poll::Poll"*, i64, i64, i64)*, void (%"core::result::Result<(), std::io::error::Error>"*, %"mio::net::tcp::TcpListener"*, %"mio::poll::Poll"*)* } { void (%"mio::net::tcp::TcpListener"*)* bitcast (void (%"mio::net::tcp::TcpStream"*)* @_ZN4core3ptr18real_drop_in_place17h1dfbf6d2047bdac8E to void (%"mio::net::tcp::TcpListener"*)*), i64 16, i64 8, void (%"core::result::Result<(), std::io::error::Error>"*, %"mio::net::tcp::TcpListener"*, %"mio::poll::Poll"*, i64, i64, i64)* @"_ZN70_$LT$mio..net..tcp..TcpListener$u20$as$u20$mio..event_imp..Evented$GT$8register17ha2cf03b5311a5922E", void (%"core::result::Result<(), std::io::error::Error>"*, %"mio::net::tcp::TcpListener"*, %"mio::poll::Poll"*, i64, i64, i64)* @"_ZN70_$LT$mio..net..tcp..TcpListener$u20$as$u20$mio..event_imp..Evented$GT$10reregister17hd7ea0235cc2154fcE", void (%"core::result::Result<(), std::io::error::Error>"*, %"mio::net::tcp::TcpListener"*, %"mio::poll::Poll"*)* @"_ZN70_$LT$mio..net..tcp..TcpListener$u20$as$u20$mio..event_imp..Evented$GT$10deregister17h82b2ff00732d37f0E" }, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.13 = private unnamed_addr constant <{ [12 x i8] }> <{ [12 x i8] c"reactor gone" }>, align 1
@vtable.b = private unnamed_addr constant { void (%"mio::net::tcp::TcpStream"*)*, i64, i64, void (%"core::result::Result<(), std::io::error::Error>"*, %"mio::net::tcp::TcpStream"*, %"mio::poll::Poll"*, i64, i64, i64)*, void (%"core::result::Result<(), std::io::error::Error>"*, %"mio::net::tcp::TcpStream"*, %"mio::poll::Poll"*, i64, i64, i64)*, void (%"core::result::Result<(), std::io::error::Error>"*, %"mio::net::tcp::TcpStream"*, %"mio::poll::Poll"*)* } { void (%"mio::net::tcp::TcpStream"*)* @_ZN4core3ptr18real_drop_in_place17h1dfbf6d2047bdac8E, i64 16, i64 8, void (%"core::result::Result<(), std::io::error::Error>"*, %"mio::net::tcp::TcpStream"*, %"mio::poll::Poll"*, i64, i64, i64)* @"_ZN68_$LT$mio..net..tcp..TcpStream$u20$as$u20$mio..event_imp..Evented$GT$8register17hc808485d1d0dc7dbE", void (%"core::result::Result<(), std::io::error::Error>"*, %"mio::net::tcp::TcpStream"*, %"mio::poll::Poll"*, i64, i64, i64)* @"_ZN68_$LT$mio..net..tcp..TcpStream$u20$as$u20$mio..event_imp..Evented$GT$10reregister17h0f516ae1b10b3c84E", void (%"core::result::Result<(), std::io::error::Error>"*, %"mio::net::tcp::TcpStream"*, %"mio::poll::Poll"*)* @"_ZN68_$LT$mio..net..tcp..TcpStream$u20$as$u20$mio..event_imp..Evented$GT$10deregister17hbae7c9b5ade424e3E" }, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.14 = private unnamed_addr constant <{ [103 x i8] }> <{ [103 x i8] c"/home/addisoncrump/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.2.13/src/net/tcp/listener.rs" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.15 = private unnamed_addr constant <{ i8*, [16 x i8] }> <{ i8* getelementptr inbounds (<{ [103 x i8] }>, <{ [103 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.14, i32 0, i32 0, i32 0), [16 x i8] c"g\00\00\00\00\00\00\00k\00\00\00M\00\00\00" }>, align 8
@str.c = internal constant [34 x i8] c"`async fn` resumed after panicking"
@str.d = internal constant [35 x i8] c"`async fn` resumed after completion"
@anon.112aa5216417f3e30cbfa40815f3b444.16 = private unnamed_addr constant <{ [32 x i8] }> <{ [32 x i8] c"could not resolve to any address" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.17 = private unnamed_addr constant <{ i8*, [16 x i8] }> <{ i8* getelementptr inbounds (<{ [103 x i8] }>, <{ [103 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.14, i32 0, i32 0, i32 0), [16 x i8] c"g\00\00\00\00\00\00\00\9F\00\00\00K\00\00\00" }>, align 8
@vtable.e = private unnamed_addr constant { void (i64**)*, i64, i64, i8* (i64**)*, i8* (i64**)* } { void (i64**)* bitcast (void (i8**)* @_ZN4core3ptr18real_drop_in_place17h17dac8a9e600688dE to void (i64**)*), i64 8, i64 8, i8* (i64**)* @"_ZN5tokio4task13Task$LT$S$GT$3run28_$u7b$$u7b$closure$u7d$$u7d$17h77a11ed1fa830a5cE", i8* (i64**)* @"_ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17h55201cde9aab2698E" }, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.18 = private unnamed_addr constant <{ i8*, i8*, i8*, i8*, i8*, i8*, i8*, [0 x i8] }> <{ i8* bitcast (i1 ({}*, {}*, [3 x i64]*)* @_ZN5tokio4task3raw4poll17h8ae230134c718f4fE to i8*), i8* bitcast (void ({}*)* @_ZN5tokio4task3raw9drop_task17h422ee28bbd3f3a28E to i8*), i8* bitcast (void ({}*, {}*, i64)* @_ZN5tokio4task3raw11read_output17h71d9a739bc9e2fb8E to i8*), i8* bitcast (i64 ({}*, { i8*, i64* }*)* @_ZN5tokio4task3raw16store_join_waker17h1bbe26763ba3ece0E to i8*), i8* bitcast (i64 ({}*, { i8*, i64* }*, i64)* @_ZN5tokio4task3raw15swap_join_waker17h7a617f21a6f3a220E to i8*), i8* bitcast (void ({}*)* @_ZN5tokio4task3raw21drop_join_handle_slow17h9c3478b8a780d847E to i8*), i8* bitcast (void ({}*, i1)* @_ZN5tokio4task3raw6cancel17h440673ff578b8afaE to i8*), [0 x i8] zeroinitializer }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.19 = private unnamed_addr constant <{ i8*, i8*, i8*, i8*, i8*, i8*, i8*, [0 x i8] }> <{ i8* bitcast (i1 ({}*, {}*, [3 x i64]*)* @_ZN5tokio4task3raw4poll17h03fbca31b17747c9E to i8*), i8* bitcast (void ({}*)* @_ZN5tokio4task3raw9drop_task17h422ee28bbd3f3a28E to i8*), i8* bitcast (void ({}*, {}*, i64)* @_ZN5tokio4task3raw11read_output17h71d9a739bc9e2fb8E to i8*), i8* bitcast (i64 ({}*, { i8*, i64* }*)* @_ZN5tokio4task3raw16store_join_waker17h1bbe26763ba3ece0E to i8*), i8* bitcast (i64 ({}*, { i8*, i64* }*, i64)* @_ZN5tokio4task3raw15swap_join_waker17h7a617f21a6f3a220E to i8*), i8* bitcast (void ({}*)* @_ZN5tokio4task3raw21drop_join_handle_slow17h9c3478b8a780d847E to i8*), i8* bitcast (void ({}*, i1)* @_ZN5tokio4task3raw6cancel17h1c94218425a95fb3E to i8*), [0 x i8] zeroinitializer }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.20 = private unnamed_addr constant <{ [42 x i8] }> <{ [42 x i8] c"internal error: entered unreachable code: " }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.21 = private unnamed_addr constant <{ i8*, [8 x i8] }> <{ i8* getelementptr inbounds (<{ [42 x i8] }>, <{ [42 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.20, i32 0, i32 0, i32 0), [8 x i8] c"*\00\00\00\00\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.22 = private unnamed_addr constant <{ [16 x i8] }> <{ [16 x i8] c"unexpected state" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.23 = private unnamed_addr constant <{ i8*, [8 x i8] }> <{ i8* getelementptr inbounds (<{ [16 x i8] }>, <{ [16 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.22, i32 0, i32 0, i32 0), [8 x i8] c"\10\00\00\00\00\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.24 = private unnamed_addr constant <{ [96 x i8] }> <{ [96 x i8] c"/home/addisoncrump/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.2.13/src/task/core.rs" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.25 = private unnamed_addr constant <{ i8*, [16 x i8] }> <{ i8* getelementptr inbounds (<{ [96 x i8] }>, <{ [96 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.24, i32 0, i32 0, i32 0), [16 x i8] c"`\00\00\00\00\00\00\00\93\00\00\00\12\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.26 = private unnamed_addr constant <{ [16 x i8] }> <{ [16 x i8] c"unexpected stage" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.27 = private unnamed_addr constant <{ i8*, [8 x i8] }> <{ i8* getelementptr inbounds (<{ [16 x i8] }>, <{ [16 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.26, i32 0, i32 0, i32 0), [8 x i8] c"\10\00\00\00\00\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.28 = private unnamed_addr constant <{ i8*, [16 x i8] }> <{ i8* getelementptr inbounds (<{ [96 x i8] }>, <{ [96 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.24, i32 0, i32 0, i32 0), [16 x i8] c"`\00\00\00\00\00\00\00t\00\00\00\16\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.29 = private unnamed_addr constant <{ [97 x i8] }> <{ [97 x i8] c"/home/addisoncrump/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.2.13/src/task/queue.rs" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.30 = private unnamed_addr constant <{ i8*, [16 x i8] }> <{ i8* getelementptr inbounds (<{ [97 x i8] }>, <{ [97 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.29, i32 0, i32 0, i32 0), [16 x i8] c"a\00\00\00\00\00\00\00\0F\01\00\00\1B\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.31 = private unnamed_addr constant <{ [14 x i8] }> <{ [14 x i8] c"mutex poisoned" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.32 = private unnamed_addr constant <{ i8*, [16 x i8] }> <{ i8* getelementptr inbounds (<{ [97 x i8] }>, <{ [97 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.29, i32 0, i32 0, i32 0), [16 x i8] c"a\00\00\00\00\00\00\00\AA\00\00\00\17\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.33 = private unnamed_addr constant <{ [113 x i8] }> <{ [113 x i8] c"must be called from the context of Tokio runtime configured with either `basic_scheduler` or `threaded_scheduler`" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.34 = private unnamed_addr constant <{ i8*, i8*, i8*, i8*, [0 x i8] }> <{ i8* bitcast ({ i8*, i64* } ({}*)* @_ZN5tokio4task5waker11clone_waker17haa21f8752533c19fE to i8*), i8* bitcast (void ({}*)* @_ZN5tokio4task5waker11wake_by_val17h41615f92ed329f52E to i8*), i8* bitcast (void ({}*)* @_ZN5tokio4task5waker11wake_by_ref17h978abe5b8a260ec3E to i8*), i8* bitcast (void ({}*)* @_ZN5tokio4task5waker10drop_waker17h18c726c8746677b4E to i8*), [0 x i8] zeroinitializer }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.35 = private unnamed_addr constant <{ i8*, i8*, i8*, i8*, [0 x i8] }> <{ i8* bitcast ({ i8*, i64* } ({}*)* @_ZN5tokio4task5waker11clone_waker17h801246328d671f18E to i8*), i8* bitcast (void ({}*)* @_ZN5tokio4task5waker11wake_by_val17hec852c706a13295aE to i8*), i8* bitcast (void ({}*)* @_ZN5tokio4task5waker11wake_by_ref17h66cc40f6f15cdd3cE to i8*), i8* bitcast (void ({}*)* @_ZN5tokio4task5waker10drop_waker17h18c726c8746677b4E to i8*), [0 x i8] zeroinitializer }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.36 = private unnamed_addr constant <{ [99 x i8] }> <{ [99 x i8] c"/home/addisoncrump/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.2.13/src/task/harness.rs" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.37 = private unnamed_addr constant <{ i8*, [16 x i8] }> <{ i8* getelementptr inbounds (<{ [99 x i8] }>, <{ [99 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.36, i32 0, i32 0, i32 0), [16 x i8] c"c\00\00\00\00\00\00\004\01\00\00\1D\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.38 = private unnamed_addr constant <{ [22 x i8] }> <{ [22 x i8] c"executor should be set" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.39 = private unnamed_addr constant <{ [39 x i8] }> <{ [39 x i8] c"first poll must happen from an executor" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.40 = private unnamed_addr constant <{ i8*, [16 x i8] }> <{ i8* getelementptr inbounds (<{ [99 x i8] }>, <{ [99 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.36, i32 0, i32 0, i32 0), [16 x i8] c"c\00\00\00\00\00\00\00\AE\01\00\00\0D\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.41 = private unnamed_addr constant <{ [37 x i8] }> <{ [37 x i8] c"assertion failed: !res.is_final_ref()" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.42 = private unnamed_addr constant <{ i8*, [16 x i8] }> <{ i8* getelementptr inbounds (<{ [99 x i8] }>, <{ [99 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.36, i32 0, i32 0, i32 0), [16 x i8] c"c\00\00\00\00\00\00\00\BD\01\00\00\1D\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.43 = private unnamed_addr constant <{ i8*, [16 x i8] }> <{ i8* getelementptr inbounds (<{ [99 x i8] }>, <{ [99 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.36, i32 0, i32 0, i32 0), [16 x i8] c"c\00\00\00\00\00\00\00y\01\00\00\09\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.44 = private unnamed_addr constant <{ [8 x i8] }> <{ [8 x i8] c"state = " }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.45 = private unnamed_addr constant <{ i8*, [8 x i8] }> <{ i8* getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.44, i32 0, i32 0, i32 0), [8 x i8] c"\08\00\00\00\00\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.46 = private unnamed_addr constant <{ i8*, [16 x i8] }> <{ i8* getelementptr inbounds (<{ [99 x i8] }>, <{ [99 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.36, i32 0, i32 0, i32 0), [16 x i8] c"c\00\00\00\00\00\00\00\A3\00\00\00\09\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.47 = private unnamed_addr constant <{ [13 x i8] }> <{ [13 x i8] c"waker missing" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.48 = private unnamed_addr constant <{ [21 x i8] }> <{ [21 x i8] c"failed to park thread" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.49 = private unnamed_addr constant <{ [118 x i8] }> <{ [118 x i8] c"/home/addisoncrump/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.2.13/src/runtime/thread_pool/queue/local.rs" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.50 = private unnamed_addr constant <{ i8*, [16 x i8] }> <{ i8* getelementptr inbounds (<{ [118 x i8] }>, <{ [118 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.49, i32 0, i32 0, i32 0), [16 x i8] c"v\00\00\00\00\00\00\00\A9\00\00\00\18\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.51 = private unnamed_addr constant <{ [14 x i8] }> <{ [14 x i8] c"failed to park" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.52 = private unnamed_addr constant <{ i8*, i8*, i8*, i8*, [0 x i8] }> <{ i8* bitcast ({ i8*, i64* } ({}*)* @_ZN5tokio7runtime15basic_scheduler17sched_clone_waker17ha3df2b658df03654E to i8*), i8* bitcast (void ({}*)* @_ZN5tokio7runtime15basic_scheduler10sched_noop17h3663dcd2af1f450dE to i8*), i8* bitcast (void ({}*)* @_ZN5tokio7runtime15basic_scheduler17sched_wake_by_ref17h0f227d041b496857E to i8*), i8* bitcast (void ({}*)* @_ZN5tokio7runtime15basic_scheduler10sched_noop17h3663dcd2af1f450dE to i8*), [0 x i8] zeroinitializer }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.53 = private unnamed_addr constant <{ [102 x i8] }> <{ [102 x i8] c"/home/addisoncrump/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.2.13/src/runtime/spawner.rs" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.54 = private unnamed_addr constant <{ i8*, [16 x i8] }> <{ i8* getelementptr inbounds (<{ [102 x i8] }>, <{ [102 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.53, i32 0, i32 0, i32 0), [16 x i8] c"f\00\00\00\00\00\00\00\1D\00\00\00#\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.55 = private unnamed_addr constant <{ [32 x i8] }> <{ [32 x i8] c"spawning not enabled for runtime" }>, align 1
@_ZN6memchr3x866memchr2FN17h86b9bdb70818f9f5E = external local_unnamed_addr global %"core::sync::atomic::AtomicPtr<()>"
@anon.112aa5216417f3e30cbfa40815f3b444.56 = private unnamed_addr constant <{ [25 x i8] }> <{ [25 x i8] c"PoisonError { inner: .. }" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.57 = private unnamed_addr constant <{ [7 x i8] }> <{ [7 x i8] c"Error: " }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.58 = private unnamed_addr constant <{ [1 x i8] }> <{ [1 x i8] c"\0A" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.59 = private unnamed_addr constant <{ i8*, [8 x i8], i8*, [8 x i8] }> <{ i8* getelementptr inbounds (<{ [7 x i8] }>, <{ [7 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.57, i32 0, i32 0, i32 0), [8 x i8] c"\07\00\00\00\00\00\00\00", i8* getelementptr inbounds (<{ [1 x i8] }>, <{ [1 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.58, i32 0, i32 0, i32 0), [8 x i8] c"\01\00\00\00\00\00\00\00" }>, align 8
@vtable.f = private unnamed_addr constant { void ({ [0 x i8]*, i64 }*)*, i64, i64, i64 ({ [0 x i8]*, i64 }*)* } { void ({ [0 x i8]*, i64 }*)* @_ZN4core3ptr18real_drop_in_place17h2c3b0f290c9aa1b2E, i64 16, i64 8, i64 ({ [0 x i8]*, i64 }*)* @"_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h3e94f3669ad6df0bE" }, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.60 = private unnamed_addr constant <{ [11 x i8] }> <{ [11 x i8] c"park failed" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.61 = private unnamed_addr constant <{ [30 x i8] }> <{ [30 x i8] c"lmaoniceonebuddypalfriendolino" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.62 = private unnamed_addr constant <{ [11 x i8] }> <{ [11 x i8] c"src/main.rs" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.63 = private unnamed_addr constant <{ i8*, [16 x i8] }> <{ i8* getelementptr inbounds (<{ [11 x i8] }>, <{ [11 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.62, i32 0, i32 0, i32 0), [16 x i8] c"\0B\00\00\00\00\00\00\00\18\00\00\00!\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.64 = private unnamed_addr constant <{ [10 x i8] }> <{ [10 x i8] c"Password: " }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.65 = private unnamed_addr constant <{ [30 x i8] }> <{ [30 x i8] c"failed to write data to socket" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.66 = private unnamed_addr constant <{ [31 x i8] }> <{ [31 x i8] c"couldn't read from input stream" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.67 = private unnamed_addr constant <{ [18 x i8] }> <{ [18 x i8] c"Captured attempt: " }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.68 = private unnamed_addr constant <{ i8*, [8 x i8], i8*, [8 x i8] }> <{ i8* getelementptr inbounds (<{ [18 x i8] }>, <{ [18 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.67, i32 0, i32 0, i32 0), [8 x i8] c"\12\00\00\00\00\00\00\00", i8* getelementptr inbounds (<{ [1 x i8] }>, <{ [1 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.58, i32 0, i32 0, i32 0), [8 x i8] c"\01\00\00\00\00\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.69 = private unnamed_addr constant <{ [9 x i8] }> <{ [9 x i8] c"/flag.txt" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.70 = private unnamed_addr constant <{ [21 x i8] }> <{ [21 x i8] c"flag.txt wasn't found" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.71 = private unnamed_addr constant <{ [24 x i8] }> <{ [24 x i8] c"flag.txt wasn't readable" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.72 = private unnamed_addr constant <{ [32 x i8] }> <{ [32 x i8] c"lmao nice try, but that's not it" }>, align 1
@anon.112aa5216417f3e30cbfa40815f3b444.73 = private unnamed_addr constant <{ i8*, [16 x i8] }> <{ i8* getelementptr inbounds (<{ [11 x i8] }>, <{ [11 x i8] }>* @anon.112aa5216417f3e30cbfa40815f3b444.62, i32 0, i32 0, i32 0), [16 x i8] c"\0B\00\00\00\00\00\00\00\10\00\00\00\01\00\00\00" }>, align 8
@anon.112aa5216417f3e30cbfa40815f3b444.74 = private unnamed_addr constant <{ [12 x i8] }> <{ [12 x i8] c"0.0.0.0:4932" }>, align 1

; Function Attrs: norecurse nounwind nonlazybind readnone uwtable
define internal i64 @"_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h3e94f3669ad6df0bE"({ [0 x i8]*, i64 }* noalias nocapture readonly align 8 dereferenceable(16) %self) unnamed_addr #0 {
start:
  ret i64 1229646359891580772
}

; Function Attrs: nonlazybind uwtable
define hidden i64 @_ZN3std2rt10lang_start17h9a376649ad328233E({ i8*, i8* } ()* nonnull %main, i64 %argc, i8** %argv) unnamed_addr #1 {
start:
  %_7 = alloca i8*, align 8
  %0 = bitcast i8** %_7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0)
  %1 = bitcast i8** %_7 to { i8*, i8* } ()**
  store { i8*, i8* } ()* %main, { i8*, i8* } ()** %1, align 8
  %_4.0 = bitcast i8** %_7 to {}*
  %2 = call i64 @_ZN3std2rt19lang_start_internal17h14e7168ba039f170E({}* nonnull align 1 %_4.0, [3 x i64]* noalias readonly align 8 dereferenceable(24) bitcast ({ void (i8**)*, i64, i64, i32 (i8**)*, i32 (i8**)*, i32 (i8**)* }* @vtable.0 to [3 x i64]*), i64 %argc, i8** %argv)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0)
  ret i64 %2
}

; Function Attrs: nonlazybind uwtable
define internal i32 @"_ZN3std2rt10lang_start28_$u7b$$u7b$closure$u7d$$u7d$17h0ea676343dfb611dE"(i8** noalias nocapture readonly align 8 dereferenceable(8) %_1) unnamed_addr #1 personality i32 (i32, i32, i64, %"unwind::libunwind::_Unwind_Exception"*, %"unwind::libunwind::_Unwind_Context"*)* @rust_eh_personality {
start:
  %_11.i.i = alloca [1 x { i8*, i8* }], align 8
  %_4.i.i = alloca %"core::fmt::Arguments", align 8
  %err.i.i = alloca { {}*, [3 x i64]* }, align 8
  %0 = bitcast i8** %_1 to { i8*, i8* } ()**
  %_3 = load { i8*, i8* } ()*, { i8*, i8* } ()** %0, align 8, !nonnull !3
  %1 = tail call { i8*, i8* } %_3()
  %2 = extractvalue { i8*, i8* } %1, 0
  %3 = icmp eq i8* %2, null
  br i1 %3, label %"_ZN86_$LT$core..result..Result$LT$$LP$$RP$$C$E$GT$$u20$as$u20$std..process..Termination$GT$6report17h26cc0489eabbfa95E.exit", label %bb5.i

// TRUNCATED output
