#!/usr/bin/env python
from itertools import permutations
from pwn import *

cmp_key = [ [0x77, 0x66, 0x7B, 0x5F, 0x6E, 0x79, 0x7D, 0x62, 0x6c, 0x72, 0x61, 0x65, 0x69, 0x6f, 0x74, 0x67, 0x75] for x in range(33)]
cmp_key_std = [0x77, 0x66, 0x7B, 0x5F, 0x6E, 0x79, 0x7D, 0x0FFFFFFFF, 0x62, 0x6c, 0x72, 
    0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF, 0x61, 0x65, 0x69, 0x0FFFFFFFF, 0x6f, 0x74,
    0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,
    0x67, 0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,     
    0x75,
    0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF,0x0FFFFFFFF, 0, 0, 0, 0]
    
len_flag = 33
init_flag ="flag{"
cmp_out = [1, 9, 0x11, 0x27, 0x2, 0x0, 0x12, 3, 8, 0x12, 9, 0x12, 0x11, 1, 0x3, 0x13, 0x4, 3, 5, 0x15, 0x2e, 0x0a, 3, 0x0a, 0x12, 3, 1, 0x2e, 0x16, 0x2e, 0x0a, 0x12, 6]
index_now = 0

def is_fine(char_now):
  try:
    index_zero = 0
    while index_zero != -1:
      if char_now == cmp_key_std[index_zero]:
        return index_zero == cmp_out[index_now]
      elif char_now >= cmp_key_std[index_zero]:
        if char_now > cmp_key_std[index_zero]:
          index_zero = 2 * (index_zero + 1)
      else:
        index_zero = 2 * index_zero + 1

    return -1 == cmp_out[index_now]
  except:
    return False

for y in range(33-6):
  cmp_key[index_now] = [ x for x in cmp_key[index_now] if is_fine(x) ]
  index_now += 1

#print( init_flag + "".join([ chr(y) for x in cmp_key for y in x ]) + "}")
#for arr_now in cmp_key:
#  print( [chr(x) for x in arr_now]) 

# Last 5 char are wrong so bruteforce or dynamic analysis with gdb
# step 2
last=['w', 'f', '_', 'n', 'y', 'b', 'l', 'r', 'a', 'e', 'i', 'o', 't', 'g', 'u']
perm = permutations(last, 5)
last_str="flag{we_beleaf_in_your_re_f"

comment='''
for x in list(perm):
  r = process("beleaf")
  r.recvuntil("flag")
  str_now_now = last_str + "".join(x) + "}"
  #r.sendline( str_now_now )
  print(hex(len(str_now_now)), str_now_now)
  r.interactive()
  exit
  ret=r.recv()
  ret=r.recv()
  print(ret)
  if "Correct!" in ret:
    print("[+] Found! {0}".format( last_str + "".join(x) + "}"))
    exit
  r.close()
'''

# just do some checks with gdb
# flag{we_beleaf_in_your_re_future}
